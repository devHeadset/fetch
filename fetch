# Get the init
get_init() {
        if [ "$kernel" = "Android" ]; then
                echo 'init.rc'
        elif [ "$kernel" = "Darwin" ]; then
                echo 'launchd'
        elif pidof -q systemd; then
                echo 'systemd'
        elif [ -f '/sbin/openrc' ]; then
                echo 'openrc'
        elif [ -f '/sbin/dinit' ]; then
                echo 'dinit'
        else
                cut -d ' ' -f 1 /proc/1/comm
        fi
}


# Get count of packages installed
get_pkg_count() {
        package_managers=('xbps-install' 'apk' 'port' 'apt' 'pacman' 'nix' 'dnf' 'rpm' 'emerge' 'eopkg')
        for package_manager in "${package_managers[@]}"; do
                if command -v "$package_manager" 2>/dev/null >&2; then
                        case "$package_manager" in
                        xbps-install) xbps-query -l | wc -l ;;
                        apk) apk search | wc -l ;;
                        apt) if [ "$kernel" != "Darwin" ]; then
                                        echo $(($(apt list --installed 2>/dev/null | wc -l) - 1))
                                 else
                                        echo 0
                                 fi
                                 ;;
                        pacman) pacman -Q | wc -l ;;
                        nix) nix-env -qa --installed '*' | wc -l ;;
                        dnf) dnf list installed | wc -l ;;
                        rpm) rpm -qa | wc -l ;;
                        emerge) qlist -I | wc -l ;;
                        port) port installed 2>/dev/null | wc -l | awk 'NR==1{print $1}' ;;
                        eopkg) eopkg li | wc -l ;;
                        esac

                        # if a package manager is found return from the function
                        return
                fi
        done
        echo 0
}

# Get distro name
get_distro_name() {
        if [ "$kernel" = "Android" ]; then
                echo 'Android'
        elif [ "$kernel" = "Darwin" ]; then
                echo "macOS $(uname) $(sw_vers -productVersion)"
        else
                awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release
        fi
}

# Get root partition space used
get_storage_info() {
        if [ "$kernel" = Android ]; then
                _MOUNTED_ON="/data"
                _GREP_ONE_ROW="$(df -h | grep ${_MOUNTED_ON})"
                _SIZE="$(echo "${_GREP_ONE_ROW}" | awk '{print $2}')"
                _USED="$(echo "${_GREP_ONE_ROW}" | awk '{print $3}')"
                echo "$(head -n1 <<<"${_USED}")B / $(head -n1 <<<"${_SIZE}")B"
        elif [ "$kernel" = "Darwin" ]; then
                total_size=$(df -Hl | grep -w "/" | awk '{print $2}')
                free_size=$(df -Hl | grep -w "/" | awk '{print $4}')
                used_size=$(( ${total_size::-1} - ${free_size::-1} ))
                echo "${used_size}G / $total_size"
        else
                df -h --output=used,size / | awk 'NR == 2 { print $1" / "$2 }'
        fi
}


# Get DE/WM
# Reference: https://github.com/unixporn/robbb/blob/master/fetcher.sh
get_de_wm() {
        wm="${XDG_CURRENT_DESKTOP#*:}"
        [ "$wm" ] || wm="$DESKTOP_SESSION"

        # for most WMs
        [ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
                id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2>/dev/null)
                id=${id##* }
                wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t 2>/dev/null | grep '^_NET_WM_NAME' | cut -d\" -f 2)
        }

        # for non-EWMH WMs
        [ ! "$wm" ] || [ "$wm" = "LG3D" ] && {
                wms=('sway' 'kiwmi' 'wayfire' 'sowm' 'catwm' 'fvwm' 'dwm' '2bwm' 'monsterwm' 'tinywm' 'xmonad')
                for current_wm in "${wms[@]}"; do
                        if pgrep -x "$current_wm" 2>/dev/null >&2; then
                                wm="${current_wm}";
                                break
                        fi
                done
        }

        echo "${wm:-unknown}"
}



init=$(get_init)
echo "Initialization system: $init"


pkg_count=$(get_pkg_count)
echo "Package count: $pkg_count"


distro=$(get_distro_name)
echo "Distro name: $distro"


storage_info=$(get_storage_info)
echo "Storage info: $storage_info"



get_de_wm=$(get_de_wm)
echo "de/wm: $get_de_wm"


